name: Auto Deploy in VPS after Push

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    name: Deploy project with Docker and Nginx
    permissions:
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: "actions/checkout@v2"
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: Login to GitHub Container Registry and push docker image
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Add .env variables
        run: |
          echo "ANTHROPIC_KEY=${{ secrets.ANTHROPIC_KEY }}" >> .env
          echo "NEXT_PUBLIC_ANALYTICS_ID=${{ secrets.NEXT_PUBLIC_ANALYTICS_ID }}" >> .env
          echo "IPINFO_TOKEN=${{ secrets.IPINFO_TOKEN }}" >> .env
          echo "BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}" >> .env

      - name: Create credentials.json file
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" > credentials.json

      - name: Create token.json file
        run: |
          echo "${{ secrets.OAUTH_TOKEN }}" > token.json

      - name: Build Docker image
        run: |
          docker build . --platform linux/amd64 -t ghcr.io/abubakvr/checklistai:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/abubakvr/checklistai:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}

      - name: Set up SSH Key and Deploy Docker Image on Server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # Check if the container is running and stop it if it exists
            if [ "$(sudo docker ps -q -f name=checklistai-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }})" ]; then
              echo "Stopping existing container..."
              sudo docker stop checklistai-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
            fi

            # Remove the container if it exists
            if [ "$(sudo docker ps -a -q -f name=checklistai-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }})" ]; then
              echo "Removing existing container..."
              sudo docker rm checklistai-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
            fi

            # Run the new Docker container
            sudo docker pull ghcr.io/abubakvr/checklistai:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}
            sudo docker run -d -p ${{ github.ref == 'refs/heads/main' && '3000:3000' || '3001:3000' }} --name checklistai-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} ghcr.io/abubakvr/checklistai:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}

            # Restart Nginx
            sudo systemctl restart nginx

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          state: "success"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          state: "failure"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

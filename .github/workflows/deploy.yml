name: Auto Deploy in VPS after Push in Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy project with Docker and Nginx
    permissions:
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: "actions/checkout@v2"
        with:
          ref: main
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          environment: production

      - name: Login to GitHub Container Registry and push docker image
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build . --platform linux/amd64 -t ghcr.io/sadeeqdev/checklistai:latest

      - name: Push Docker image
        run: |
          docker push ghcr.io/sadeeqdev/checklistai:latest

      - name: Set up SSH Key and Deploy Docker Image on Server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # Stop the existing Docker container
            sudo docker stop checklistai || true
            sudo docker rm checklistai || true

            # Run the new Docker container
            sudo docker run -d -p 3000:3000 --name checklistai ghcr.io/sadeeqdev/checklistai:latest

            # Restart Nginx
            sudo systemctl restart nginx

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          state: "success"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          state: "failure"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
